class Media {
  constructor(title) {
    this._rating = [];
    this._title = title;
    this._isCheckedOut = false;
  }
  get rating() {
    return this._rating
  }
  get title() {
    return this._title
  }
  get isCheckedOut() {
    return this._isCheckedOut
  }
  set isCheckedOut(isCheckedOut) {
    this._isCheckedOut = isCheckedOut;
  }
  toggleCheckOutStatus() {
    this._isCheckedOut = !this._isCheckedOut; 
  }
  getAverageRating() {
    let ratingsSum = this.rating.reduce((accumulator, rating) => accumulator + rating); 
    return ratingsSum / this.rating.length;
  }
  addRating(argument) {
    this.rating.push(argument);
  }
};
// end of parent class
// start of 1st subclass
class Book extends Media {
  constructor(author, title, pages) {
    super(title)
    this._author = author;
    this._pages = pages;
  }
  get author() {
    return this._author
  }
  get pages() {
    return this._pages
  }
}
// start of second subclass 
class Movie extends Media {
  constructor(director, title, runTime){
    super(title)
    this._director = director;
    this._runTime = runTime;
  }
  get director() {
    return this._director
  }
  get runTime() {
    return this._runTime
  }
}
// Creating an instance of 1st subclass
const historyOfEverything = new Book('Bill Bryson', 'A Short History of Nearly Everything', 544)

//testing methods and functions for Book
historyOfEverything.toggleCheckOutStatus();
console.log(historyOfEverything.isCheckedOut);
historyOfEverything.addRating(4)
historyOfEverything.addRating(5)
historyOfEverything.addRating(5)
console.log(historyOfEverything.getAverageRating());

//testing methods and functions for Movie
const speed = new Movie('Jan de Bont', 'Speed', 116)
speed.toggleCheckOutStatus();
console.log(speed.isCheckedOut)
speed.addRating(1)
speed.addRating(1)
speed.addRating(5)
console.log(speed.getAverageRating());
